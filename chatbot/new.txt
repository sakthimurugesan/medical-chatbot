import numpy as np
import pandas as pd
import datetime
import matplotlib.pyplot as plt
from matplotlib import colors
import seaborn as sns
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.decomposition import PCA
from yellowbrick.cluster import KElbowVisualizer
from sklearn.cluster import KMeans
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import AgglomerativeClustering
import warnings

# Suppress warnings
warnings.simplefilter("ignore")
np.random.seed(42)

# Load the dataset
data = pd.read_csv("marketing_campaign.csv",sep="\t")
print("Number of datapoints:", len(data))
print(data.info())

# Drop rows with NA values
data = data.dropna()
print("The total number of data-points after removing the rows with missing values are:", len(data))

# Convert `Dt_Customer` to datetime and calculate "Customer_For" feature
# Convert to datetime (without .dt.date)
data["Dt_Customer"] = pd.to_datetime(data["Dt_Customer"], dayfirst=True)

# Calculate days difference
data["Customer_For"] = (max(data["Dt_Customer"]) - data["Dt_Customer"]).dt.days


print("Total categories in 'Marital_Status':\n", data["Marital_Status"].value_counts())
print("Total categories in 'Education':\n", data["Education"].value_counts())

# Feature Engineering
data["Age"] = 2021 - data["Year_Birth"]
data["Spent"] = data[["MntWines", "MntFruits", "MntMeatProducts", "MntFishProducts", "MntSweetProducts", "MntGoldProds"]].sum(axis=1)
data["Living_With"] = data["Marital_Status"].replace({
    "Married": "Partner", "Together": "Partner", 
    "Absurd": "Alone", "Widow": "Alone", "YOLO": "Alone", "Divorced": "Alone", "Single": "Alone"
})
data["Children"] = data["Kidhome"] + data["Teenhome"]
data["Family_Size"] = data["Living_With"].replace({"Alone": 1, "Partner": 2}) + data["Children"]
data["Is_Parent"] = np.where(data["Children"] > 0, 1, 0)
data["Education"] = data["Education"].replace({
    "Basic": "Undergraduate", "2n Cycle": "Undergraduate", 
    "Graduation": "Graduate", "Master": "Postgraduate", "PhD": "Postgraduate"
})

# Rename columns for clarity
data = data.rename(columns={
    "MntWines": "Wines", "MntFruits": "Fruits", "MntMeatProducts": "Meat",
    "MntFishProducts": "Fish", "MntSweetProducts": "Sweets", "MntGoldProds": "Gold"
})

# Drop redundant features
data = data.drop(columns=["Marital_Status", "Dt_Customer", "Z_CostContact", "Z_Revenue", "Year_Birth", "ID"])

# Plot selected features
sns.set(rc={"axes.facecolor": "#FFF9ED", "figure.facecolor": "#FFF9ED"})
palette = ["#682F2F", "#9E726F", "#D6B2B1", "#B9C0C9", "#9F8A78", "#F3AB60"]
To_Plot = ["Income", "Recency", "Customer_For", "Age", "Spent", "Is_Parent"]
print("Relative Plot Of Some Selected Features: A Data Subset")
plt.figure()
sns.pairplot(data[To_Plot].astype({"Is_Parent": "category"}), hue="Is_Parent", palette=["#682F2F", "#F3AB60"])
plt.show()

# Remove outliers
data = data[(data["Age"] < 90) & (data["Income"] < 600000)]
print("The total number of data-points after removing the outliers are:", len(data))

# Correlation matrix
plt.figure(figsize=(20, 20))
# Option 1: Exclude non-numeric columns
sns.heatmap(data.select_dtypes(include=[np.number]).corr(), annot=True, cmap=colors.ListedColormap(palette), center=0)

plt.show()

# Encode categorical variables
object_cols = data.select_dtypes(include='object').columns
LE = LabelEncoder()
for col in object_cols:
    data[col] = LE.fit_transform(data[col])
    
# Scale features
scaler = StandardScaler()
scaled_ds = pd.DataFrame(scaler.fit_transform(data), columns=data.columns)
print("All features are now scaled")

# Dimensionality Reduction with PCA
pca = PCA(n_components=3)
PCA_ds = pd.DataFrame(pca.fit_transform(scaled_ds), columns=["col1", "col2", "col3"])

# 3D Projection
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection="3d")
ax.scatter(PCA_ds["col1"], PCA_ds["col2"], PCA_ds["col3"], c="maroon", marker="o")
ax.set_title("3D Projection Of Data In Reduced Dimensions")
ax.set_xlabel("PC1")
ax.set_ylabel("PC2")
ax.set_zlabel("PC3")
plt.show()

# Elbow Method
print("Elbow Method to determine the optimal number of clusters:")
elbow = KElbowVisualizer(KMeans(), k=10)
elbow.fit(PCA_ds)
elbow.show()

# Clustering with Agglomerative Clustering
AC = AgglomerativeClustering(n_clusters=4)
PCA_ds["Clusters"] = AC.fit_predict(PCA_ds)
data["Clusters"] = PCA_ds["Clusters"]

# 3D Clusters Plot
fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection="3d")
scatter = ax.scatter(PCA_ds["col1"], PCA_ds["col2"], PCA_ds["col3"], c=PCA_ds["Clusters"], cmap=ListedColormap(palette))
ax.set_title("Cluster Plot in 3D")
plt.show()

# Plot cluster distribution
sns.countplot(x=data["Clusters"], palette=palette).set_title("Distribution Of The Clusters")
plt.show()

# Spending vs Income scatter plot
sns.scatterplot(x="Spent", y="Income", hue="Clusters", data=data, palette=palette).set_title("Cluster's Profile Based On Income And Spending")
plt.legend()
plt.show()

























Number of datapoints: 2240
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 2240 entries, 0 to 2239
Data columns (total 29 columns):
 #   Column               Non-Null Count  Dtype
---  ------               --------------  -----
 0   ID                   2240 non-null   int64
 1   Year_Birth           2240 non-null   int64
 2   Education            2240 non-null   object
 3   Marital_Status       2240 non-null   object
 4   Income               2216 non-null   float64
 5   Kidhome              2240 non-null   int64
 6   Teenhome             2240 non-null   int64
 7   Dt_Customer          2240 non-null   object
 8   Recency              2240 non-null   int64
 9   MntWines             2240 non-null   int64
 10  MntFruits            2240 non-null   int64
 11  MntMeatProducts      2240 non-null   int64
 12  MntFishProducts      2240 non-null   int64
 13  MntSweetProducts     2240 non-null   int64
 14  MntGoldProds         2240 non-null   int64
 15  NumDealsPurchases    2240 non-null   int64
 16  NumWebPurchases      2240 non-null   int64
 17  NumCatalogPurchases  2240 non-null   int64
 18  NumStorePurchases    2240 non-null   int64
 19  NumWebVisitsMonth    2240 non-null   int64
 20  AcceptedCmp3         2240 non-null   int64
 21  AcceptedCmp4         2240 non-null   int64
 22  AcceptedCmp5         2240 non-null   int64
 23  AcceptedCmp1         2240 non-null   int64
 24  AcceptedCmp2         2240 non-null   int64
 25  Complain             2240 non-null   int64
 26  Z_CostContact        2240 non-null   int64
 27  Z_Revenue            2240 non-null   int64
 28  Response             2240 non-null   int64
dtypes: float64(1), int64(25), object(3)
memory usage: 507.6+ KB
None
The total number of data-points after removing the rows with missing values are: 2216
Total categories in 'Marital_Status':
 Marital_Status
Married     857
Together    573
Single      471
Divorced    232
Widow        76
Alone         3
Absurd        2
YOLO          2
Name: count, dtype: int64
Total categories in 'Education':
 Education
2n Cycle       200
Basic           54
Name: count, dtype: int64
Relative Plot Of Some Selected Features: A Data Subset
The total number of data-points after removing the outliers are: 2212
All features are now scaled